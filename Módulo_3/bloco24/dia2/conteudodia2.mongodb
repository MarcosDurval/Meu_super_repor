db.supplies.deleteOne(
  { _id: 1 }
);

db.supplies.updateOne(
  {},
  {
$push: {
      items: {
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
      },
    },
  },
  { upsert: true },
);

db.supplies.find({})

db.dropDatabase()

db.supplies.updateOne(
  {},
  {
  $push:{
    item:{
      teste:"sil"
    }
  }
  }
)

use("sales");
db.supplies.updateOne(
  { _id: 1 },
  {
$push: {
      items: {
$each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
$sort: { quantity: -1 },
$slice: 2,
      },
    },
  },
  { upsert: true },
);

db.supplies.updateOne(
  { _id: 1 },
  { $pop: { items: -1 } }
); // assim remove o primeiro item do array

db.supplies.updateOne(
  { _id: 1 },
  { $pop: { item: 1 } }
);// assim remove o ultimo item do array


//Operador $pull
use("sales")
db.supplies.insertMany(
  [
    {
  _id: 1,
  items: [
    {
      "name" : "notepad",
      "price" : 35.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
},
{
  _id: 2,
  items: [
    {
      "name" : "pencil",
      "price" : 5.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "backpack",
      "price": 80.12,
      "quantity": 1,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
}
  ]
)

db.supplies.updateMany(
  {},
  {
$pull: {
      items: {
        price: { $lte: 10 },
      },
    },
  },
);

// não foi passado um filtro logo todos 
// os items onde o name for igual ao passado 
// no array serão deletados

//Operador $addToSet
//este operador evita de ter itens repetidos no array 
// vale resaltar se os dados forem iguais mas estiverem
// em ordem diferente ele não evita a duplicação.
const x = db.inventory.find()
console.log(x)
db.inventory.insertOne({
  _id:1,
  tags:[]
})
db.inventory.updateOne(
  {},
{$set:{
    id:1
  }},
  { $addToSet: { tags: "accessories" } },
);
db.recipes.insertMany([
  {
    title: "Panqueca Simples",
    ingredients: [
      { name: "Farinha", quantity: 2},
      { name: "Oleo", quantity: 4 },
      { name: "Leite", quantity: 1 },
    ],
  },
  {
    title: "Bolo de Cenoura",
    ingredients: [
      { name: "Farinha", quantity: 2},
      { name: "Oleo", quantity: 1, unit: "xícara" },
      { name: "Ovo", quantity: 3},
      { name: "Cenoura", quantity: 3},
      { name: "Fermento", quantity: 1},
    ],
  },
]);

db.recipes.updateOne(
  {},
  {$set:{
    "ingredients.$[teste].unit": "Xícara"
  },
  },
  {arrayFilters:[{"teste.name": ""}]}
)

db.recipes.find()
db.recipes.updateOne({title:"Panqueca Simples"},
  {$set:{
    "ingredients.1.unit": "Xícara"
  }}

)
db.recipes.updateMany( // Passamos de updateOne para updateMany.
  {}, // Retiramos a restrição do título.
  {
$set : {
      "ingredients.$[elemento].unit": "xícara", // Setamos `unit` como "xícara",
      "ingredients.$[elemento].name": "Farinha Integral", // `name` como "Farinha Integral".
    },
  },
  { arrayFilters: [ { "elemento.name": "Farinha" } ] }, // Filtramos os arrays que o valor da propriedade `name` seja "Farinha".
);